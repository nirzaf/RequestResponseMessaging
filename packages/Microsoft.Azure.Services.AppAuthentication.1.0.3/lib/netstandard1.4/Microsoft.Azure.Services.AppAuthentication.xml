<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Azure.Services.AppAuthentication</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Azure.Services.AppAuthentication.AccessToken">
            <summary>
            Used to hold the deserialized access token. 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Services.AppAuthentication.AccessToken.ToString">
            <summary>
            Return the access token as-is
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.Services.AppAuthentication.AccessToken.IsAboutToExpire">
            <summary>
            Check if the token is about to expire
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Azure.Services.AppAuthentication.AzureServiceTokenProvider">
            <summary>
            Gets access tokens to authenticate to Azure services using the developer's (Azure AD/ Microsoft) account during development, 
            and using the app's identity (using OAuth 2.0 Client Credentials flow) when deployed to Azure.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Services.AppAuthentication.AzureServiceTokenProvider.TokenCallback">
            <summary>
            Token callback for Key Vault. 
            </summary>
            <param name="authority"></param>
            <param name="resource"></param>
            <param name="scope"></param>
        </member>
        <member name="P:Microsoft.Azure.Services.AppAuthentication.AzureServiceTokenProvider.KeyVaultTokenCallback">
            <summary>
            Property to get authentication callback to be used with KeyVaultClient.  
            </summary>
            <example>
            <code>
            KeyVaultClient keyVaultClient = new KeyVaultClient(new KeyVaultClient.AuthenticationCallback(azureServiceTokenProvider.KeyVaultTokenCallback));
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Azure.Services.AppAuthentication.AzureServiceTokenProvider.PrincipalUsed">
            <summary>
            The principal used to acquire token. This will be of type "User" for local development scenarios, and "App" when client credentials flow is used. 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Services.AppAuthentication.AzureServiceTokenProvider.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of the AzureServiceTokenProvider class.
            If no connection string is specified, Managed Service Identity, Visual Studio, Azure CLI, and Integrated Windows Authentication are tried to get a token.
            Even If no connection string is specified in code, one can be specified in the AzureServicesAuthConnectionString environment variable. 
            </summary>
            <param name="connectionString">Connection string to specify which option to use to get the token.</param>
            <param name="azureAdInstance">Specify a value for clouds other than the Public Cloud.</param>
        </member>
        <member name="M:Microsoft.Azure.Services.AppAuthentication.AzureServiceTokenProvider.#ctor(Microsoft.Azure.Services.AppAuthentication.NonInteractiveAzureServiceTokenProviderBase)">
            <summary>
            This method is for testing only
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Services.AppAuthentication.AzureServiceTokenProvider.#ctor(System.Collections.Generic.List{Microsoft.Azure.Services.AppAuthentication.NonInteractiveAzureServiceTokenProviderBase})">
            <summary>
            This method is for testing only
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Services.AppAuthentication.AzureServiceTokenProvider.GetAccessTokenAsyncImpl(System.String,System.String,System.String)">
            <summary>
            This is the core method to get a token. It checks if the token is in cache, and if so, returns it. 
            If not in cache, asks one or more token providers to get the token. 
            </summary>
            <param name="authority"></param>
            <param name="resource"></param>
            <param name="scope"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.Services.AppAuthentication.AzureServiceTokenProvider.GetTokenProviders">
            <summary>
            If a connection string was specified, or discovery of provider has already happened (in which case _selectedAccessTokenProvider would have been set),
            Use the approproate access token provider. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.Services.AppAuthentication.AzureServiceTokenProvider.GetAccessTokenAsync(System.String,System.String)">
            <summary>
            Gets an access token to access the given Azure resource. 
            </summary>
            <example>
            <code>
            var azureServiceTokenProvider = new AzureServiceTokenProvider();
            string accessToken = await azureServiceTokenProvider.GetAccessTokenAsync("https://management.azure.com/").ConfigureAwait(false);
            </code>
            </example>
            <param name="resource">Resource to access. e.g. https://management.azure.com/.</param>
            <param name="tenantId">If not specified, default tenant is used. Managed Service Identity REST protocols do not accept tenantId, so this can only be used with certificate and client secret based authentication.</param>
            <returns>Access token</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if resource is null or empty.</exception>
            <exception cref="T:Microsoft.Azure.Services.AppAuthentication.AzureServiceTokenProviderException">Thrown if access token cannot be acquired.</exception>
        </member>
        <member name="T:Microsoft.Azure.Services.AppAuthentication.AzureServiceTokenProviderException">
            <summary>
            Instance of this exception is thrown if access token cannot be acquired. 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Services.AppAuthentication.AzureServiceTokenProviderException.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Creates an instance of AzureServiceTokenProviderException. 
            </summary>
            <param name="connectionString">Connection string used.</param>
            <param name="resource">Resource for which token was expected.</param>
            <param name="authority">Authority for which token was expected.</param>
            <param name="message">Reason why token could not be acquired.</param>
        </member>
        <member name="T:Microsoft.Azure.Services.AppAuthentication.AzureServiceTokenProviderFactory">
            <summary>
            Creates an access token provider based on the connection string. 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Services.AppAuthentication.AzureServiceTokenProviderFactory.Create(System.String,System.String)">
            <summary>
            Returns a specific token provider based on authentication option specified in the connection string. 
            </summary>
            <param name="connectionString">Connection string with authentication option and related parameters.</param>
            <param name="azureAdInstance"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.Services.AppAuthentication.AzureServiceTokenProviderFactory.ValidateAttributes(System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Throws an exception if none of the attributes are in the connection string
            </summary>
            <param name="connectionSettings">List of key value pairs in the connection string</param>
            <param name="attributes">List of attributes to test</param>
            <param name="connectionString">The connection string specified</param>
        </member>
        <member name="T:Microsoft.Azure.Services.AppAuthentication.AccessTokenCache">
            <summary>
            Cache for access tokens. 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Services.AppAuthentication.AccessTokenCache.Get(System.String)">
            <summary>
            Gets the token from the cache. If it is present, and not about to expire, it is returned. 
            </summary>
            <param name="cacheKey"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.Services.AppAuthentication.AccessTokenCache.AddOrUpdate(System.String,System.Tuple{Microsoft.Azure.Services.AppAuthentication.AccessToken,Microsoft.Azure.Services.AppAuthentication.Principal})">
            <summary>
            Tuple of access token and principal are added to the cache after the token is aquired. 
            </summary>
            <param name="cacheKey"></param>
            <param name="tokenTuple"></param>
        </member>
        <member name="M:Microsoft.Azure.Services.AppAuthentication.AccessTokenCache.Clear">
            <summary>
            This is for unit testing
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Services.AppAuthentication.AdalAuthenticationContext">
            <summary>
            Uses ADAL to get tokens. Used for Integrated Windows Authentication and Client Credentials flow (client secret and certificates). 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Services.AppAuthentication.AdalAuthenticationContext.AcquireTokenAsync(System.String,System.String,System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.UserCredential)">
            <summary>
            Used to get token for Integrated Windows Authentication scenario. 
            </summary>
            <param name="authority"></param>
            <param name="resource"></param>
            <param name="clientId"></param>
            <param name="userCredential"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.Services.AppAuthentication.AdalAuthenticationContext.AcquireTokenSilentAsync(System.String,System.String,System.String)">
            <summary>
            Used to get token for Integrated Windows Authentication scenario, where the token may already be in ADAL cache. 
            </summary>
            <param name="authority"></param>
            <param name="resource"></param>
            <param name="clientId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.Services.AppAuthentication.AdalAuthenticationContext.AcquireTokenAsync(System.String,System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.ClientCredential)">
            <summary>
            Used to get token for client credentials flow using a client secret. 
            </summary>
            <param name="authority"></param>
            <param name="resource"></param>
            <param name="clientCredential"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.Services.AppAuthentication.AdalAuthenticationContext.AcquireTokenAsync(System.String,System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.IClientAssertionCertificate)">
            <summary>
            Used to get token for client credentials flow using a client certificate. 
            </summary>
            <param name="authority"></param>
            <param name="resource"></param>
            <param name="clientCertificate"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Azure.Services.AppAuthentication.IAuthenticationContext">
            <summary>
            Interface that helps mock ADAL usage for unit testing. 
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Services.AppAuthentication.IProcessManager">
            <summary>
            Interface that helps mock invoking a process and getting the result from standard output and error streams. 
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Services.AppAuthentication.ProcessManager">
            <summary>
            Invokes a process and returns the result from the standard output or error streams.
            This is used to invoke az account get-access-token to get a token for local development. 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Services.AppAuthentication.ProcessManager.ExecuteAsync(System.Diagnostics.Process)">
            <summary>
            Execute the given process and return the result. 
            </summary>
            <param name="process">The process to execute</param>
            <returns>Returns the process output from the standard output stream.</returns>
        </member>
        <member name="T:Microsoft.Azure.Services.AppAuthentication.CertificateHelper">
            <summary>
            Helper class to get certificates.  
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Services.AppAuthentication.CertificateHelper.GetCertificates(System.String,System.Boolean,System.Security.Cryptography.X509Certificates.StoreLocation)">
            <summary>
            Get certificates from cert store
            </summary>
            <param name="isThumbprint">If true, search for thumbprint, else for subjectName</param>
            <param name="location"></param>
            <param name="subjectNameOrThumbprint">The actual value to search for.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Azure.Services.AppAuthentication.EnvironmentHelper">
            <summary>
            Method to get system directory. This method has been added to .NET Standard 2.0, but since we target 1.4, need to write it. 
            Gets the system directory to get the install path for Azure CLI. 
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Services.AppAuthentication.JsonHelper">
            <summary>
            To deserialize JSON response from token providers. 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Services.AppAuthentication.UriHelper.GetTenantByAuthority(System.String)">
            <summary>
            Given an Azure AD authority URL, returns the tenant from it
            </summary>
            <param name="authority">Azure AD authority e.g. https://login.microsoftonline.com/tenantID</param>
            <returns>Tenant if the authority is valid and has tenant information, else null</returns>
        </member>
        <member name="M:Microsoft.Azure.Services.AppAuthentication.ValidationHelper.ValidateResource(System.String)">
            <summary>
            Validates a resource identifier. 
            </summary>
            <param name="resource">The resource to validate.</param>
        </member>
        <member name="T:Microsoft.Azure.Services.AppAuthentication.Principal">
            <summary>
            Information about the principal used to get the token.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Services.AppAuthentication.Principal.IsAuthenticated">
            <summary>
            Will be false if token has not been acquired
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Services.AppAuthentication.Principal.Type">
            <summary>
            Either User or App
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Services.AppAuthentication.Principal.UserPrincipalName">
            <summary>
            If Type is User, the user's UserPrincipalName
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Services.AppAuthentication.Principal.AppId">
            <summary>
            If Type is App, the App Id used
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Services.AppAuthentication.Principal.TenantId">
            <summary>
            Tenant the token was acquired from
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Services.AppAuthentication.Principal.CertificateThumbprint">
            <summary>
            If Type is App, and a certificate was used, the certificate's thumbprint
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Services.AppAuthentication.Principal.ToString">
            <summary>
            Returns a representation of the principal with non-null fields
            </summary>
            <returns>The representation of this <see cref="T:Microsoft.Azure.Services.AppAuthentication.Principal"/> that includes all non-null fields</returns>
        </member>
        <member name="T:Microsoft.Azure.Services.AppAuthentication.AzureCliAccessTokenProvider">
            <summary>
            Gets a token using Azure CLI 2.0 for local development scenarios. 
            az account get-access-token --resource
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Services.AppAuthentication.ClientCertificateAzureServiceTokenProvider">
            <summary>
            Used to acquire token using certificate associated with an Azure AD application.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Services.AppAuthentication.ClientCertificateAzureServiceTokenProvider.#ctor(System.String,System.String,System.Boolean,System.String,System.String,System.String,Microsoft.Azure.Services.AppAuthentication.IAuthenticationContext)">
            <summary>
            Creates instance of ClientCertificateAzureServiceTokenProvider class.
            </summary>
            <param name="clientId"></param>
            <param name="certificateSubjectNameOrThumbprint"></param>
            <param name="isThumbprint"></param>
            <param name="storeLocation"></param>
            <param name="azureAdInstance"></param>
            <param name="authenticationContext"></param>
            <param name="tenantId"></param>
        </member>
        <member name="M:Microsoft.Azure.Services.AppAuthentication.ClientCertificateAzureServiceTokenProvider.GetTokenAsync(System.String,System.String)">
            <summary>
            Get access token using asymmetric key associated with an Azure AD application.
            </summary>
            <param name="resource">Resource to access.</param>
            <param name="authority">Authority where resource is.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Azure.Services.AppAuthentication.ClientSecretAccessTokenProvider">
            <summary>
            Used to acquire token using client secret associated with an Azure AD application.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Services.AppAuthentication.MsiAccessTokenProvider">
            <summary>
            Gets a token using Azure VM or App Services MSI. 
            https://docs.microsoft.com/en-us/azure/active-directory/msi-overview
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Services.AppAuthentication.NonInteractiveAzureServiceTokenProviderBase">
            <summary>
            Base class from which other token providers derive. 
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Services.AppAuthentication.VisualStudioAccessTokenProvider">
            <summary>
            Gets a token using Visual Studio key chain for local development scenarios. 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Services.AppAuthentication.VisualStudioAccessTokenProvider.GetTokenProviderFile">
            <summary>
            Gets the token provider file from user's local appdata folder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.Services.AppAuthentication.VisualStudioAccessTokenProvider.GetProcessStartInfos(Microsoft.Azure.Services.AppAuthentication.VisualStudioTokenProviderFile,System.String,System.String)">
            <summary>
            Gets a list of token provider executables to call to get token.
            </summary>
            <param name="visualStudioTokenProviderFile">Visual Studio Token provider file</param>
            <param name="resource"></param>
            <param name="tenant"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Azure.Services.AppAuthentication.WindowsAuthenticationAzureServiceTokenProvider">
            <summary>
            Uses Integrated Windows Authentication to get access token. 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Services.AppAuthentication.WindowsAuthenticationAzureServiceTokenProvider.GetTokenAsync(System.String,System.String)">
            <summary>
            Get access token by authenticating to Azure AD using Integrated Windows Authentication (IWA), 
            when domain is synced with Azure AD tenant. 
            </summary>
            <param name="resource">Resource to access.</param>
            <param name="authority">Authority where resource is present.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Azure.Services.AppAuthentication.TokenResponse">
            <summary>
            Used to hold the deserialized token response. 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Services.AppAuthentication.TokenResponse.Parse(System.String)">
            <summary>
            Parse token response returned from OAuth provider.
            While more fields are returned, we only need the access token. 
            </summary>
            <param name="tokenResponse">This is the response received from OAuth endpoint that has the access token in it.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Azure.Services.AppAuthentication.VisualStudioTokenProvider">
            <summary>
            Used to de-serialize the Visual Studio token provider file. 
            </summary>
        </member>
    </members>
</doc>
